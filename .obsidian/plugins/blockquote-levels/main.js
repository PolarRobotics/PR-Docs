/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BlockquoteLevels
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  spaceBetweenPrefixes: false
};
var BlockquoteLevels = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new BlockquoteLevelsSettingTab(this.app, this));
    this.addCommand({
      id: "blockquote-levels-increase",
      name: "Increase",
      editorCallback: (editor, view) => {
        if (editor.somethingSelected()) {
          this.increaseLevelForSelections(editor);
        } else {
          this.increaseLevelForLine(editor);
        }
      }
    });
    this.addCommand({
      id: "blockquote-levels-decrease",
      name: "Decrease",
      editorCallback: (editor, view) => {
        if (editor.somethingSelected()) {
          this.decreaseLevelForSelections(editor);
        } else {
          this.decreaseLevelForLine(editor);
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  increaseLevelForSelections(editor) {
    const prefix = this.settings.spaceBetweenPrefixes ? "> " : ">";
    this.processSelections(
      editor,
      (line) => /^>/.test(line) ? `${prefix}${line}` : `> ${line}`
    );
  }
  decreaseLevelForSelections(editor) {
    this.processSelections(
      editor,
      (line) => line.replace(/^>\s*/, "")
    );
  }
  processSelections(editor, lineProcessor) {
    this.expandAndSortSelections(editor);
    for (const selection of editor.listSelections()) {
      const text = editor.getRange(selection.anchor, selection.head).split(/\n/).map(lineProcessor).join("\n");
      editor.replaceRange(text, selection.anchor, selection.head);
    }
  }
  expandAndSortSelections(editor) {
    const preparedSelections = editor.listSelections().sort(
      (s1, s2) => this.getLineNumbersOfSelection(s2).lastLine - this.getLineNumbersOfSelection(s1).lastLine
    ).map((selection) => {
      const { firstLine, lastLine } = this.getLineNumbersOfSelection(
        selection
      );
      return {
        anchor: { line: firstLine, ch: 0 },
        head: { line: lastLine, ch: editor.getLine(lastLine).length }
      };
    });
    editor.setSelections(preparedSelections);
  }
  getLineNumbersOfSelection(selection) {
    const nos = [selection.anchor.line, selection.head.line].sort((a, b) => a - b);
    return {
      firstLine: nos[0],
      lastLine: nos[1]
    };
  }
  increaseLevelForLine(editor) {
    this.processLine(
      editor,
      () => this.increaseLevelForSelections(editor)
    );
  }
  decreaseLevelForLine(editor) {
    this.processLine(
      editor,
      () => this.decreaseLevelForSelections(editor)
    );
  }
  processLine(editor, selectionProcessor) {
    const { line, ch } = editor.getCursor("head");
    const origLineLength = editor.getLine(line).length;
    editor.setSelection(
      { line, ch: 0 },
      { line, ch: origLineLength }
    );
    selectionProcessor(editor);
    const cursorOffset = editor.getLine(line).length - origLineLength;
    editor.setCursor({ line, ch: ch + cursorOffset });
  }
};
var BlockquoteLevelsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Blockquote Levels Settings" });
    new import_obsidian.Setting(containerEl).setName("Use a space between subsequent blockquote prefixes").setDesc('Disabled: ">>> quote", Enabled: "> > > quote"').addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.spaceBetweenPrefixes).onChange(async (value) => {
        console.log(
          "[Blockquote Levels] Use spaces between subsequent blockquote prefixes: " + value
        );
        this.plugin.settings.spaceBetweenPrefixes = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
